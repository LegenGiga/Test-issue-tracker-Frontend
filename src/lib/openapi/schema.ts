/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/api/comments/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['comments_list'];
        put?: never;
        post: operations['comments_create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/comments/{id}/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['comments_retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/profiles/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['profiles_list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/profiles/{id}/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['profiles_retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description The user can only be updated with its API Key */
        patch: operations['profiles_partial_update'];
        trace?: never;
    };
    '/api/profiles/{id}/comments/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['profiles_comments_retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/api/schema/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations['schema_retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Comment: {
            readonly id?: number;
            /** Format: date-time */
            readonly created_at?: string;
            text: string;
            issue: number;
            user: number;
        };
        CommentRequest: {
            text: string;
            issue: number;
            user: number;
        };
        IssueUser: {
            readonly id?: number;
            github_id?: string | null;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            avatar_url?: string | null;
            name?: string | null;
            bio?: string | null;
            /** Format: uri */
            avatar?: string | null;
        };
        PatchedIssueUserUpdateRequest: {
            username?: string;
            name?: string;
            bio?: string;
            /** Format: binary */
            avatar?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    comments_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Comment'][];
                };
            };
        };
    };
    comments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CommentRequest'];
                'application/x-www-form-urlencoded': components['schemas']['CommentRequest'];
                'multipart/form-data': components['schemas']['CommentRequest'];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Comment'];
                };
            };
        };
    };
    comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this comment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Comment'];
                };
            };
        };
    };
    profiles_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssueUser'][];
                };
            };
        };
    };
    profiles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssueUser'];
                };
            };
        };
    };
    profiles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': components['schemas']['PatchedIssueUserUpdateRequest'];
                'application/json': components['schemas']['PatchedIssueUserUpdateRequest'];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssueUser'];
                };
            };
        };
    };
    profiles_comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssueUser'];
                };
            };
        };
    };
    schema_retrieve: {
        parameters: {
            query?: {
                format?: 'json' | 'yaml';
                lang?:
                    | 'af'
                    | 'ar'
                    | 'ar-dz'
                    | 'ast'
                    | 'az'
                    | 'be'
                    | 'bg'
                    | 'bn'
                    | 'br'
                    | 'bs'
                    | 'ca'
                    | 'ckb'
                    | 'cs'
                    | 'cy'
                    | 'da'
                    | 'de'
                    | 'dsb'
                    | 'el'
                    | 'en'
                    | 'en-au'
                    | 'en-gb'
                    | 'eo'
                    | 'es'
                    | 'es-ar'
                    | 'es-co'
                    | 'es-mx'
                    | 'es-ni'
                    | 'es-ve'
                    | 'et'
                    | 'eu'
                    | 'fa'
                    | 'fi'
                    | 'fr'
                    | 'fy'
                    | 'ga'
                    | 'gd'
                    | 'gl'
                    | 'he'
                    | 'hi'
                    | 'hr'
                    | 'hsb'
                    | 'hu'
                    | 'hy'
                    | 'ia'
                    | 'id'
                    | 'ig'
                    | 'io'
                    | 'is'
                    | 'it'
                    | 'ja'
                    | 'ka'
                    | 'kab'
                    | 'kk'
                    | 'km'
                    | 'kn'
                    | 'ko'
                    | 'ky'
                    | 'lb'
                    | 'lt'
                    | 'lv'
                    | 'mk'
                    | 'ml'
                    | 'mn'
                    | 'mr'
                    | 'ms'
                    | 'my'
                    | 'nb'
                    | 'ne'
                    | 'nl'
                    | 'nn'
                    | 'os'
                    | 'pa'
                    | 'pl'
                    | 'pt'
                    | 'pt-br'
                    | 'ro'
                    | 'ru'
                    | 'sk'
                    | 'sl'
                    | 'sq'
                    | 'sr'
                    | 'sr-latn'
                    | 'sv'
                    | 'sw'
                    | 'ta'
                    | 'te'
                    | 'tg'
                    | 'th'
                    | 'tk'
                    | 'tr'
                    | 'tt'
                    | 'udm'
                    | 'ug'
                    | 'uk'
                    | 'ur'
                    | 'uz'
                    | 'vi'
                    | 'zh-hans'
                    | 'zh-hant';
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/vnd.oai.openapi': {
                        [key: string]: unknown;
                    };
                    'application/yaml': {
                        [key: string]: unknown;
                    };
                    'application/vnd.oai.openapi+json': {
                        [key: string]: unknown;
                    };
                    'application/json': {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
}
